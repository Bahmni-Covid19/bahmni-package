plugins {
    id "nebula.os-package" version "2.2.6"
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'http://mavenrepo.openmrs.org/nexus/content/repositories/public'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories'
    }
    mavenLocal()
}

def rpmOpenmrsVersion = project.openmrsVersion.replaceAll('-SNAPSHOT','')

group 'org.bahmni.openmrs'
version rpmOpenmrsVersion

apply plugin: 'java'
apply plugin: 'rpm'

task extractWar(dependsOn: 'downloadMRSWar', type: Copy) {
    from zipTree(file("${buildDir}/resources/main/openmrs.war"))
    into file("${buildDir}/openmrs")
}

task normalizeJarName(type: Copy) {
    from "${buildDir}" + "/libs/"
    into "${buildDir}" + "/libs/"
    include(project.name + '-' + rpmOpenmrsVersion + '.jar')
    rename(project.name + '-' + rpmOpenmrsVersion + '.jar', 'openmrs.jar')
}

//644 for all files other than executables
//744 for all files which are executables
//755 for all folders

buildRpm {
    dependsOn 'build', 'normalizeJarName', 'downloadMRSWar'
    packageName 'openmrs'
    release System.getenv('GO_PIPELINE_COUNTER') ?: "1"
    arch NOARCH
    os LINUX
    user 'root'

    into '/opt/openmrs'

    requires('unzip')
    requires('mysql-community-client', "5.6", GREATER | EQUAL)

    postInstall file("${projectDir}/scripts/postinstall.sh")
    preUninstall file("${projectDir}/scripts/preuninstall.sh")
    postUninstall file("${projectDir}/scripts/postuninstall.sh")

    from("${buildDir}/libs/openmrs.jar") {
        fileMode = 0644
        createDirectoryEntry = true
        into 'lib/'
    }

    from("${projectDir}/resources/") {
        fileMode = 0644
        createDirectoryEntry = true
        into 'etc'
        exclude('initDB.sh')
    }

    from("${projectDir}/scripts/rpm/") {
        fileMode = 0744
        createDirectoryEntry = true
        into 'bin'
    }

    from("${projectDir}/resources/placeholder") {
        createDirectoryEntry = true
        into 'run'
    }

    from("${projectDir}/resources/placeholder") {
        createDirectoryEntry = true
        into 'log'
    }

    from("${buildDir}/resources/main/openmrs.war") {
        fileMode = 0644
        createDirectoryEntry = true
        into '.'
    }

    from("${projectDir}/resources/placeholder") {
        createDirectoryEntry = true
        into 'openmrs'
    }

    from("${projectDir}/resources/initDB.sh") {
        fileMode = 0744
        createDirectoryEntry = true
        into 'openmrs/scripts'
    }

    from("${projectDir}/resources/openmrs_demo_dump.sql") {
        fileMode = 0644
        createDirectoryEntry = true
        into 'openmrs/scripts'
    }

    from("${projectDir}/resources/openmrs_clean_dump.sql") {
        fileMode = 0644
        createDirectoryEntry = true
        into 'openmrs/scripts'
    }
}

task downloadMRSWar << {
    new File("${buildDir}/resources/main").mkdirs();
    configurations.mrsWar.resolve().each { file ->
        if (file.getName().contains("openmrs")) {
            file.renameTo(new File("${buildDir}/resources/main/openmrs.war"))
        }
    }
}

configurations {
    mrsWar
}

downloadMRSWar.onlyIf { !(new File("${buildDir}/resources/main/openmrs.war").exists()) }

dependencies {
    compile project(":core")
    mrsWar "org.openmrs.web:openmrs-webapp:${openmrsVersion}@war"
}

jar {
    manifest {
        attributes 'Main-Class': "org.bahmni.deployment.launch.Main"
    }
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}
